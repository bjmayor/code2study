* 第一章 UNIX基础知识
操作系统有两个含义：
1. 仅指内核，它控制计算机硬件资源，提供程序运行环境。
2. 广义上，包括内核和一些其它软件，如系统实用程序、应用软件、shell以及公用函数库等。 
** 文件与目录
   UNIX文件系统的大多数实现并不在目录项中存放属性。有inode就够。

   程序的正确性是由硬件->内核->系统调用->标准库函数->第三方库->程序员 逐步保证的。
** 程序与进程
   程序是存放在磁盘上，处于某个目录中的一个可执行文件。使用6个exec函数中的一个由内核将程序读入存储器，并使其执行。
   
   有三个用于进程控制的主要函数：fork、exec和waitpid。
*** 线程和线程ID
    通常，一个进程只有一个控制线程，同一时刻只执行一组机器指令。
    在一个进程内的所有线程共享同一地址空间、文件描述符、栈以及与进程相关的属性。因为它们能访问同一存储区，所以各线程在访问共享数据时需要采取同步措施以避免不一致性。
** 出错处理
   当UNIX函数出错时，一般返回一个负值，而且整型变量errno通常被设置为含有附加信息的一个值。
   返回一个指向对象指针的大多数函数，在出错时，将返回一个null指针。

   POSIX和ISO C将errno定义为这样一个符号，它扩展成为一个可修改的整型左值(lvalue)。这可以是包含出错编号的一个函数，或者是一个返回出错编号指针的函数。
   extern int * __errno_location(void);
   #define errno (*__errno_location())
   在支持多线程的环境中，多个线程共享进程地址空间，每个线程都有属于它自己的局部errno以避免一个线程干扰另一个线程。
   对于errno应当知道两条规则：
   1. 如果没有出错，则其值不会被一个例程清除。因为，仅当函数的返回值指明出错时，才检验其值。
   2. 任一函数都不会将errno值设为0,在<errno.h>中定义的所有常量都不为0。
 
** 用户标识
   对于权限，使用数值用户ID和数值值ID是历史上形成的。1是数字比字符串的存储空间小,每个文件都会存放用户ID和组ID;2是查验权限期间，比较整数更快。
   
** 信号
   信号是通知进程已发生某种情况的一种技术。

   进程处理信息有三种选择：
   1. 忽略信号。
   2. 按系统默认方式处理。
   3. 提供一个信号捕捉函数，自定义处理。

   在键盘上产生信号的办法,中断键盘(Ctrl+C)和退出键(Ctrl+\)。
   
** 时间值
   长期以来，UNIX系统一直使用两种不同的时间值。
   1. 日历时间。自1970年1月1日00:00:00以来UTC所经过的秒数。
   2. 进程时间。也被称为CPU时间，用来度量进程使用的中央处理器资源。
      1. 时针时间
      2. 用户CPU时间
      3. 系统CPU时间。


* 第二章 UNIX标准化及实现
** UNIX标准化
   所有标准化工作的一个重要部分是对每种实现必须定义的各种限制进行说明。
  名词解释:
  ISO(International Organization for Standardization), 国际标准化组织。
  IEC(International Electrotechnical Commission),国际电子技术委员会。
  IEEE(Institude of Electrical and Electronics Engineers), 电气与电子工程师协会。
  POSIX(Portable Operating System Interface), 可移植的操作系统接口。
  Single UNIX Specification, 单一UNIX规范。

*** ISO C
    ISO C标准的意图是提供C程序的可移植性，使其能适合于大量不同的操作系统，而不只是UNIX系统。
    此标准不仅定义了C程序设计语言的语法和语义，还定义了其标准库。
    
    ISO C标准定义的头文件(24个区)
    | 头文件       | FreeBSD5.2.1 | Linux2.4.22 | Mac OS X 10.3 | Solaris9 | 说明                     |
    | <assert.h>   | *            | *           | *             | *        | 验证程序断言             |
    | <complex.h>  | *            | *           | *             |          | 支持复数算术运算         |
    | <ctypes.h>   | *            | *           | *             | *        | 字符类型                 |
    | <errno.h>    | *            | *           | *             | *        | 出错码                   |
    | <fenv.h>     |              | *           | *             | *        | 浮点环境                 |
    | <float.h>    | *            | *           | *             | *        | 浮点常量                 |
    | <inttypes.h> | *            | *           | *             | *        | 整形格式转换             |
    | <iso646.h>   | *            | *           | *             | *        | 替代关系操作符宏         |
    | <limits.h>   | *            | *           | *             | *        | 实现常量                 |
    | <locale.h>   | *            | *           | *             | *        | 局部类别                 |
    | <math.h>     | *            | *           | *             | *        | 数学常量                 |
    | <setjmp.h>   | *            | *           | *             | *        | 非局部goto               |
    | <signal.h>   | *            | *           | *             | *        | 信号                     |
    | <stdarg.h>   | *            | *           | *             | *        | 可变参数表               |
    | <stdbool.h>  | *            | *           | *             | *        | 布尔类型和值             |
    | <stddef.h>   | *            | *           | *             | *        | 标准定义                 |
    | <stdint.h>   | *            | *           | *             |          | 整形                     |
    | <stdio.h>    | *            | *           | *             | *        | 标准IO库                 |
    | <stdlib.h>   | *            | *           | *             | *        | 实用程序函数             |
    | <string.h>   | *            | *           | *             | *        | 字符串操作               |
    | <tgmath.h>   |              | *           |               |          | 通用类型数学宏           |
    | <time.h>     | *            | *           | *             | *        | 时间和日期               |
    | <wchar.h>    | *            | *           | *             | *        | 扩展的多字节和宽字符支持 |
    | <wctype.h>   | *            | *           | *             | *        | 宽字符分类和映射支持     |
    
*** IEEE POSIX
    可移植的操作系统接口，原来指的是操作系统接口，后来扩展成包括很多标记为1003的标准及标准草案，包括shell和实用程序。
* 第三章 文件I/O
** 引言
   UNIX系统中的大多数文件I/O只需要用到5个函数:open、read、write、lseek以及close。
   
   本章说明的函数经常被称为不带缓冲的I/O。术语 **不带缓冲** 指的是每个read和write都调用内核的一个系统调用。

   多个进程共享文件 相关的函数：dup、fcntl、sync、fsync和ioctl

** 文件描述符
   文件描述符的变化范围是0~OPEN_MAX。
** open函数

   #include <fcntl.h>
   int open(const char *pathname, int oflag, ... /* mode_t mode */);

   O_DSYNC和O_SYNC标志有微妙的区别。仅当文件属性需要更新以反映文件数据变化(例如，更新文件大小以反映文件中包含了更多的数据)时，O_DSYNC标志
   才影响文件属性。而设置O_SYNC标志后，数据和属性总是同步更新。当文件用O_DSYNC标志打开，在重写其现有的部分内容时，文件时间属性不会同步更新。与此相反，如果文件是用O_SYNC标志打开，那么对该文件的每一次
   write操作都将在write返回前更新文件时间, 这与是否改写现有字节或增写文件无关。
   
   由open返回的文件描述符一定是最小的未用描述符数值。
   
   若_POSIX_NNO_TRUNC有效，则在整个路径名超过PATH_MAX, 或路径名中任一文件名超过NAME_MAX时，返回出错状态，并将errno设置为ENAMETOOLONG。
   
** create函数

   #include <fcntl.h>
   int create(const char *pathname, mode_t mode);
   此函数等效于open(pathname, O_WRONLY | O_CREATE | O_TRUNC, mode);

** close函数
   
   #include <fcntl.h>
   int close(int filedes);

   关闭一个文件时还会释放该进程加在该文件上的所有 **记录锁**
   当一个进程终止时，内核自动关闭它所有打开的文件。